function fig = motionplayergui(varargin)
global SCENE
fig = figure( 'Visible','on',...
   'Name','MotionPlayer',...
   'NumberTitle','off',...
   'Position',[400,200,800,600],...
   'Resize', 'on', ...
   'Color',[1.0 1.0 1.0],...%[.92 .95 .95],...
   'Interruptible','on',...
   'KeyPressFcn',@keyPressFunction,...
   'Renderer','OpenGl');

scene = axes('Parent',fig,'Units', 'pixels', ...
   'Position',[5, 100, 790, 475],...
   'Projection', 'perspective');
% cameratoolbar(fig, 'Show');
cameratoolbar(fig, 'SetCoordSys','y');
cameratoolbar(fig, 'SetMode','orbit');

axis equal;
axis off;

if(~SCENE.sceneIsEmpty)
   %set the current axis dimensions
   renewAxisDimensions();
   cSkelColor = SCENE.armatures(1).color;
else
   % set nframes to a default value if there are no motions loaded
   SCENE.status.nframes = 10;
   cSkelColor = [.8 .8 .8];
end

% control panel
control_Panel = uipanel(...
   'Parent',fig,'Units','pixels',...
   'Position',[2 2 800 110],...
   'BackgroundColor',[1.0 1.0 1.0]);%[.97 .97 .97]); 

goto_First_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','|<',...
    'Units','pixels',...
    'Position',[2 80 30 20],...
    'TooltipString','go to first frame',...
    'BackgroundColor',[0.1,0.8,0.8], ...
    'CallBack',@gotoFirstFunction);

play_reverse_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','<|',...
    'Units','pixels',...
    'Position',[34 80 30 20],...
    'TooltipString','play backwards',...
    'BackgroundColor',[0.1,0.9,0.1], ...
    'CallBack',@playReverseFunction);

pause_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','||',...
    'Units','pixels',...
    'Position',[66 80 30 20],...
    'TooltipString','pause',...
    'BackgroundColor',[1,0.5,.0], ...
    'CallBack',@pauseFunction);

play_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','|>',...
    'Units','pixels',...
    'Position',[98 80 30 20],...
    'TooltipString','play',...
    'BackgroundColor',[0.1,0.9,0.1], ...
    'CallBack',@playFunction);

goto_Last_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','>|',...
    'Units','pixels',...
    'Position',[130 80 30 20],...
    'TooltipString','go to last frame',...
    'BackgroundColor',[0.1,0.8,0.8], ...
    'CallBack',@gotoLastFunction);

slower_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','<<',...
    'Units','pixels',...
    'Position',[172 80 30 20],...
    'TooltipString','slower',...
    'BackgroundColor',[0.8,.2,0.8], ...
    'CallBack',@slowerFunction);

faster_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','>>',...
    'Units','pixels',...
    'Position',[204 80 30 20],...
    'TooltipString','faster',...
    'BackgroundColor',[0.8,.2,0.8], ...
    'CallBack',@fasterFunction);

loop_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','|--|',...
    'Units','pixels',...
    'Position',[236 80 37 20],...
    'TooltipString','loop',...
    'BackgroundColor',[0.8,.2,0.8], ...
    'CallBack',@loopFunction);

orbit_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','orbit',...
    'Units','pixels',...
    'Position',[280 80 60 20],...
    'TooltipString','Orbit Camera',...
    'BackgroundColor',[0.9,0.9,0.97], ...
    'CallBack',@orbitFunction);

dollyhv_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','move h/v',...
    'Units','pixels',...
    'Position',[342 80 60 20],...
    'TooltipString','Move - Horizontally/Vertically',...
    'BackgroundColor',[0.8,0.8,0.8], ...
    'CallBack',@dollyhvFunction);

dollyfb_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','move f/b',...
    'Units','pixels',...
    'Position',[404 80 60 20],...
    'TooltipString','Move - Forward/Backward',...
    'BackgroundColor',[0.8,0.8,0.8], ...
    'CallBack',@dollyfbFunction);

quit_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','Quit',...
    'Units','pixels',...
    'Position',[755 80 40 20],...
    'BackgroundColor',[0.9,.0,.0], ...
    'CallBack',@closeFunction);

skel_List_Menu = uicontrol(control_Panel,'Style','popup', ...
    'String',getListOfMotNames(),...
    'Units','pixels',...
    'Position',[470 80 200 20],...
    'BackgroundColor',[0.95,0.95,0.95], ...
    'CallBack',@switchCurrentSkelFunction);

% current_skel_color = uicontrol(control_Panel,'Style','Text',...
%                 'String','',...
%                 'Units','pixels','FontSize',7,...
%                 'BackgroundColor',cSkelColor,...
%                 'Position',[645 80 30 20]);

addSkel_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','+',...
    'Units','pixels',...
    'Position',[675 80 30 20],...
    'TooltipString','add skel to scene',...
    'BackgroundColor',[0.8,0.8,0.8], ...
    'CallBack',@addSkelFunction);

delSkel_Button = uicontrol(control_Panel,'Style','Pushbutton', ...
    'String','-',...
    'Units','pixels',...
    'Position',[707 80 30 20],...
    'TooltipString','delete skel from scene',...
    'BackgroundColor',cSkelColor, ...
    'CallBack',@delSkelFunction);

frame_Slider = uicontrol(control_Panel,'Style','Slider', ...
    'String','Current Frame',...
    'Units','pixels',...
    'Max',SCENE.status.nframes,...
    'Min',1,...
    'Value',1,...
    'SliderStep',[1/SCENE.status.nframes 10/SCENE.status.nframes],...
    'Position',[2 35 792 20],...
    'BackgroundColor',[.8 .8 .8], ...
    'CallBack',@moveFrameSliderFunction);

status_Panel = uipanel(...
    'Parent',control_Panel,'Units','pixels',...
    'Position',[2 2 792 30],...
    'BackgroundColor',[.97 .97 .97]);

curFrameLabel = uicontrol(status_Panel,'Style','Text', ...
    'String','frame/frames',...
    'Units','pixels',...
    'TooltipString','current frame',...
    'HorizontalAlignment','left',...
    'BackgroundColor',[.97 .97 .97],...
    'Position',[1 0 100 22]);

curSpeedLabel = uicontrol(status_Panel,'Style','Text', ...
    'String','x1.00',...
    'Units','pixels',...
    'TooltipString','current speed',...
    'HorizontalAlignment','left',...
    'BackgroundColor',[.97 .97 .97],...
    'Position',[150 0 40 22]);


curFpsLabel = uicontrol(status_Panel,'Style','Text', ...
    'String',' fps',...
    'Units','pixels',...
    'TooltipString','current frame',...
    'HorizontalAlignment','left',...
    'BackgroundColor',[.97 .97 .97],...
    'Position',[720 0 60 22]);

setFrameNumMarkers();

SCENE.status.sliderHandle = frame_Slider;
SCENE.status.curFrameLabel = curFrameLabel;
SCENE.status.curFpsLabel = curFpsLabel;

% callback functions
    function switchCurrentSkelFunction(source,eventdata)
%         str = get(source, 'String')
        val = get(source,'Value');
        currentSkelColor = SCENE.armatures(val).color;
        SCENE.status.curSkel = val;
        set(delSkel_Button, 'BackgroundColor',currentSkelColor);
    end

    function addSkelFunction(varargin)
        disp('not fully functional yet');
        return
        addMotionsFig = figure( 'Visible','on',...
            'Name','Select Skel & Mot',...
            'NumberTitle','off',...
            'Position',[400,200,280,300],...
            'Resize', 'off', ...
            'Color',[.92 .95 .95]);
        listbox = uicontrol(addMotionsFig,'Style', 'listbox',...
            'String',blanks(0),...
            'Units','pixels',...
            'Max',10,...
            'Min',1,...
            'Value',1,...
            'Position',[5 30 270 270],...
            'BackgroundColor',[1,1,1]);
        
        uicontrol(addMotionsFig,'Style','Pushbutton', ...
            'String','update',...
            'Units','pixels',...
            'Position',[5 10 100 20],...
            'BackgroundColor',[0.8,0.8,0.8], ...
            'CallBack',@update_list);
        uicontrol(addMotionsFig,'Style','Pushbutton', ...
            'String','add selected',...
            'Units','pixels',...
            'Position',[110 10 100 20],...
            'BackgroundColor',[0.8,0.8,0.8], ...
            'CallBack',@add_motion);
        function update_list(varargin)
            vars = evalin('base','who');
            set(listbox,'String',vars)
        end
        function [var1,var2] = get_var_names()
            % Returns the names of the two variables to plot
            list_entries = get(listbox,'String');
            index_selected = get(listbox,'Value');
            if length(index_selected) ~= 2
                errordlg('You must select two variables','Incorrect Selection','modal')
            else
                var1 = list_entries{index_selected(1)};
                var2 = list_entries{index_selected(2)};
            end
        end
        function add_motion(varargin)
            [var1,var2] = get_var_names();
            v1 = evalin('base',var1);
            v2 = evalin('base',var2);
            if(isSkel({v1}))
                skel = v1;
                mot = v2;
            else
                skel = v2;
                mot = v1;
            end
            addArmature(skel,mot);
            updateScene();
            close(addMotionsFig);
        end
        update_list();
    end

    function delSkelFunction(varargin)
        disp('not fully functional yet');
        return
        if(~SCENE.sceneIsEmpty)
            curSkel = SCENE.status.curSkel;
            curArmature = SCENE.armatures(curSkel);
            SCENE.armatures(curSkel) = [];
            SCENE.status.numArmatures = SCENE.status.numArmatures - 1;
            if (SCENE.status.numArmatures == 0)
                SCENE.sceneIsEmpty = true;
            end
            updateScene();
        end
    end

    function keyPressFunction(src,evnt)
        disp('keystroke');
    end

    function playReverseFunction(varargin)
        SCENE.status.reverse = true;
        if(~SCENE.sceneIsEmpty)
        if(~SCENE.status.running)
            SCENE.status.running = true;
        end
        if(SCENE.status.curFrame == 1)
            SCENE.status.curFrame = SCENE.status.nframes;
        end
        while(SCENE.status.running && SCENE.status.reverse)
            tic;
            nextFrame = getNextFrame();
            setFrame(nextFrame);
            SCENE.status.curFrame = nextFrame;
            drawnow;
            SCENE.status.lastRenderTime = toc;
        end
        end
    end

    function pauseFunction(varargin)
        SCENE.status.running = false;
    end

    function playFunction(varargin)
        SCENE.status.reverse = false;
        if(~SCENE.sceneIsEmpty)
        if(~SCENE.status.running)
            SCENE.status.running = true;
        end
        if(SCENE.status.curFrame == SCENE.status.nframes)
            SCENE.status.curFrame = 1;
        end
        t = clock;
%         disp(['time animation calculated: ' num2str(SCENE.status.nframes/...
%             (SCENE.status.speed * 120.0))]);
        while(SCENE.status.running && ~SCENE.status.reverse)
            tic;
            nextFrame = getNextFrame();
            setFrame(nextFrame);
            SCENE.status.curFrame = nextFrame;
            drawnow;
            SCENE.status.lastRenderTime = toc;
        end
%         disp(['time animation: ' num2str(etime(clock, t))]);
%         disp('---');
        end
    end

    function gotoFirstFunction(varargin)
        if(~SCENE.sceneIsEmpty)
        SCENE.status.running = false;
        SCENE.status.curFrame = 1;
        setFrame(1);
        drawnow;
        end
    end

    function gotoLastFunction(varargin)
        if(~SCENE.sceneIsEmpty)
        SCENE.status.running = false;
        SCENE.status.curFrame = SCENE.status.nframes;
        setFrame(SCENE.status.nframes);
        drawnow;
        end
    end

    function loopFunction(varargin)
        if(SCENE.status.looped)
            SCENE.status.looped = false;
            set(loop_Button, 'String','|--|','TooltipString','loop');
        else
            SCENE.status.looped = true;
            set(loop_Button, 'String','<-->','TooltipString','no loop');
        end
    end

    function orbitFunction(varargin)
        cameratoolbar('SetMode','orbit');
        set(orbit_Button,'BackgroundColor',[0.9,0.9,0.97]);
        set(dollyhv_Button,'BackgroundColor',[0.8,0.8,0.8]);
        set(dollyfb_Button,'BackgroundColor',[0.8,0.8,0.8]);
    end

    function dollyhvFunction(varargin)
        cameratoolbar('SetMode','dollyhv');
        set(orbit_Button,'BackgroundColor',[0.8,0.8,0.8]);
        set(dollyhv_Button,'BackgroundColor',[0.9,0.9,0.97]);
        set(dollyfb_Button,'BackgroundColor',[0.8,0.8,0.8]);
    end

    function dollyfbFunction(varargin)
        cameratoolbar('SetMode','dollyfb');
        set(orbit_Button,'BackgroundColor',[0.8,0.8,0.8]);
        set(dollyhv_Button,'BackgroundColor',[0.8,0.8,0.8]);
        set(dollyfb_Button,'BackgroundColor',[0.9,0.9,0.97]);
    end

    function closeFunction(varargin)
        SCENE.status.running = false;
        close
    end

    function moveFrameSliderFunction(varargin)
        % der Slider erzeugt kein event, wenn er gerdrueckt wird,
        % daher wird das Abspielen unterbrochen
        if(~SCENE.sceneIsEmpty)
        if (SCENE.status.running)
            SCENE.status.running = false;
            curFrame = int32(get(frame_Slider,'Value'));
            SCENE.status.curFrame = curFrame;
            setFrame(curFrame);
            drawnow;
        else
            curFrame = int32(get(frame_Slider,'Value'));
            SCENE.status.curFrame = curFrame;
            setFrame(curFrame);
            drawnow;
        end
        end
    end

    function slowerFunction(varargin)
        if(SCENE.status.speed > 0.125)
            SCENE.status.speed = SCENE.status.speed/2;
            set(curSpeedLabel,'String',...
                sprintf('x%1.2f',SCENE.status.speed));
        end
    end

    function fasterFunction(varargin)
        if(SCENE.status.speed < 8)
            SCENE.status.speed = SCENE.status.speed*2;
            set(curSpeedLabel,'String',...
                sprintf('x%1.2f',SCENE.status.speed));
        end
    end

% helper functions
    % get current list of motion names
    function listOfMotNames = getListOfMotNames()
        if(~SCENE.sceneIsEmpty)
            numArmatures = SCENE.status.numArmatures;
            listOfMotNames = struct('name','');
            for armature = 1:numArmatures
                if(~isempty(SCENE.armatures(armature).mot.filename))
                    listOfMotNames(armature).name = strcat(...
                        num2str(armature),':_',...
                        SCENE.armatures(armature).mot.filename);
                else
                    listOfMotNames(armature).name = strcat(...
                        num2str(armature),':_armature_',num2str(armature));
                end
            end
            listOfMotNames = str2mat(struct2cell(listOfMotNames));
        else
            listOfMotNames = str2mat('empty scene');
        end
    end

    function nextFrame = getNextFrame()
        curFrame = SCENE.status.curFrame;
        reverse = SCENE.status.reverse;
        speed = SCENE.status.speed;
        lastRenderTime = SCENE.status.lastRenderTime;
        samplingRate = SCENE.status.samplingRate;
        nframes = SCENE.status.nframes;
        currentFPS = 1 / lastRenderTime;
        SCENE.status.curFps = currentFPS;
        lastDelay = SCENE.status.delay;
        if (reverse)
            next = speed * (samplingRate / currentFPS);
            currentDelay = next - floor(next) + lastDelay;
            skipFrames = round(next) + round(currentDelay);
            currentDelay = currentDelay - round(currentDelay);
            SCENE.status.delay = currentDelay;
            if ((curFrame == 1) || ((curFrame - skipFrames) <= 0))
                if(SCENE.status.looped)
                    nextFrame = nframes;
                else
                    SCENE.status.running = false;
                    nextFrame = 1;
                end
            else
                nextFrame = curFrame - skipFrames;
            end
        else
            next = speed * (samplingRate / currentFPS);
            currentDelay = (next - floor(next)) + lastDelay;
            skipFrames = round(next) + round(currentDelay);
            currentDelay = currentDelay - round(currentDelay);
            SCENE.status.delay = currentDelay;
            if ((curFrame == nframes) || ((curFrame + skipFrames) >= nframes))
                if(SCENE.status.looped)
                    nextFrame = 1;
                else
                    SCENE.status.running = false;
                    nextFrame = nframes;
                end
            else
                nextFrame = curFrame + skipFrames;
            end
        end
    end
    
    function updateScene()
        cla
        if(~SCENE.sceneIsEmpty)
            renderScene();
            % render armatures
            for armature = 1:SCENE.status.numArmatures
                renderArmature(armature);
            end
            if (SCENE.status.numMarkers > 0)
                renderMarkers();
            end
            % set scene to frame 1
            setFrame(1);
            SCENE.status.curFrame = 1;
        end
        set(skel_List_Menu, 'String', getListOfMotNames());
        renewAxisDimensions()
    end

    function setFrameNumMarkers()
        % place the frame markers above the slider
        nframes = SCENE.status.nframes;
        if(~isempty(SCENE.status.numMarkerHandle))
            for m = 1:size(SCENE.status.numMarkerHandle,2)
                delete(SCENE.status.numMarkerHandle(m))
            end
        end
        numMarkerHandle = [];
        position = 1;
        if (nframes<=50)
            numMarkerHandle(position) = uicontrol(control_Panel,'Style','Text',...
                'String',1,...
                'Units','pixels','FontSize',7,...
                'BackgroundColor',[.97 .97 .97],...
                'Position',[0 60 45 12]);
            position = position + 1;
            numMarkerHandle(position) = uicontrol(control_Panel,'Style','Text',...
                'String',uint32(nframes/2),...
                'Units','pixels',...
                'FontSize',7,...
                'BackgroundColor',[.97 .97 .97],...
                'Position',[371 60 45 12]);
            position = position + 1;
            numMarkerHandle(position) = uicontrol(control_Panel,'Style','Text',...
                'String',nframes,...
                'Units','pixels',...
                'FontSize',7,...
                'BackgroundColor',[.97 .97 .97],...
                'Position',[742 60 45 12]);
            position = position + 1;
        else
            b = 10;
            while((nframes/b)>=10)
                b = b + 10;
            end
            numMarkers = uint32(nframes/b);
            for m = 0:numMarkers
                frameNum = max(uint32(m*b),1);
                posFromLeft = uint32((742/numMarkers)*m);
                numMarkerHandle(position) = uicontrol(control_Panel,'Style','Text',...
                    'String',frameNum,'Units','pixels',...
                    'FontSize',7,'BackgroundColor',[.97 .97 .97],...
                    'Position',[posFromLeft 60 45 12]);
                position = position + 1;
            end
            numMarkerHandle(position) = uicontrol(control_Panel,'Style','Text',...
                'String',nframes,...
                'Units','pixels',...
                'FontSize',7,...
                'BackgroundColor',[.97 .97 .97],...
                'Position',[742 60 45 12]);
        end
        SCENE.status.numMarkerHandle = numMarkerHandle;
    end

    function renewAxisDimensions()
        % set the dimensions of the axis from the current boundingBox
        bb = SCENE.status.boundingBox;
        % b1 = [xmin ymin zmin]
        b1 = bb([1 3 5]);
        % b2 = [xmax ymax zmax]
        b2 = bb([2 4 6]);
        % main diagonal / 2 of boundingbox
        diagonal = sqrt(...
            (b1(1) - b2(1))^2 + ...
            (b1(2) - b2(2))^2 + ...
            (b1(3) - b2(3))^2)/2;
        % center of the boundingbox's bottom
        xc = bb(1) + abs(bb(1) - bb(2))/2;
        yc = bb(3) + abs(bb(3) - bb(4))/2;
        %zc = bb(5) + abs(bb(5) - bb(6))/2;
        axisDimensions = [xc-diagonal xc+diagonal yc-diagonal yc+diagonal];
        axis (axisDimensions);
    end
end
